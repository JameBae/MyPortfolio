# -*- coding: utf-8 -*-
"""ML_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KExpD6gyCvgvkD7IIwutVe0qXuh274ok
"""

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

df = pd.read_csv("https://gist.githubusercontent.com/seankross/a412dfbd88b3db70b74b/raw/5f23f993cd87c283ce766e7ac6b329ee7cc2e1d1/mtcars.csv")
df.head()

# Feature Selection
df.corr(numeric_only = True)

# mpg = f(drat, vs, am, gear)
X = df[["drat", "vs", "am", "gear"]]
y = df["mpg"]

# split data
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 33)

"""##Linear Regression"""

# train model
lm_model = LinearRegression()
lm_model.fit(X_train, y_train)

# test model / scoring
lm_pred = lm_model.predict(X_test)

# MAE
lmmae = np.mean(np.absolute(y_test - lm_pred))
# MSE
lmmse = np.mean((y_test - lm_pred)**2)
# RMSE
lmrmse = np.sqrt(lmmse)
# train predict
lmtrain_mae = np.mean(np.absolute(y_train - lm_model.predict(X_train)))
lmtrain_mse = np.mean((y_train - lm_model.predict(X_train))**2)
lmtrain_rmse = np.sqrt(lmtrain_mse)
print(f"Test LM_MAE : {lmmae}, Train LM_MAE : {lmtrain_mae}")
print(f"Test LM_MSE : {lmmse}, Train LM_MSE : {lmtrain_mse}")
print(f"Test LM_RMSE : {lmrmse}, Train LM_RMSE : {lmtrain_rmse}")

"""## DecisionTree"""

# train model
knn_model = KNeighborsRegressor()
knn_model.fit(X_train, y_train)

# test model / scoring
knn_pred = knn_model.predict(X_test)

# MAE
knnmae = np.mean(np.absolute(y_test - knn_pred))
# MSE
knnmse = np.mean((y_test - knn_pred)**2)
# RMSE
knnrmse = np.sqrt(knnmse)
# train predict
knntrain_mae = np.mean(np.absolute(y_train - knn_model.predict(X_train)))
knntrain_mse = np.mean((y_train - knn_model.predict(X_train))**2)
knntrain_rmse = np.sqrt(knntrain_mse)
print(f"Test KNN_MAE : {knnmae}, Train KNN_MAE : {knntrain_mae}")
print(f"Test KNN_MSE : {knnmse}, Train KNN_MSE : {knntrain_mse}")
print(f"Test KNN_RMSE : {knnrmse}, Train KNN_RMSE : {knntrain_rmse}")

"""## RandomForest"""

# train model
rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)

# test model / scoring
rf_pred = rf_model.predict(X_test)

# MAE
rfmae = np.mean(np.absolute(y_test - rf_pred))
# MSE
rfmse = np.mean((y_test - rf_pred)**2)
# RMSE
rfrmse = np.sqrt(rfmse)
# train predict
rftrain_mae = np.mean(np.absolute(y_train - rf_model.predict(X_train)))
rftrain_mse = np.mean((y_train - rf_model.predict(X_train))**2)
rftrain_rmse = np.sqrt(rftrain_mse)
print(f"Test RandomForest_MAE : {rfmae}, Train RandomForest_MAE : {rftrain_mae}")
print(f"Test RandomForest_MSE : {rfmse}, Train RandomForest_MSE : {rftrain_mse}")
print(f"Test RandomForest_RMSE : {rfrmse}, Train RandomForest_RMSE : {rftrain_rmse}")

**Model 1 (Linear)** is the best model for predicted mpg (mile per galon)
